//package ARS;
//package way2sms;
import java.io.*;
import java.util.*;
import javax.comm.*;

import java.net.HttpURLConnection;

public abstract class SMSUtil implements Runnable
{



//-----------

 private static int responseCode = -1;
 private static String userCredentials = null;
 private static String cookie = null;
 private static String site = null;
 private static String actionStr = null;
 private static Credentials credentials = new Credentials();


 //------------
		 private Enumeration portList;
    	 private CommPortIdentifier portId;
		 private SerialPort serialPort;
		 private OutputStream outputStream;
		 private String strPortName;
		 private InputStream inputStream;
		 private boolean boolKeepReceiving=true;
		 private Thread threadRX;
		 private ArrayList alSMSStore;
		 private int intDelay;
		 public SMSUtil(String strPortName) throws Exception{
		 		this.strPortName=strPortName;
	 			initCommPort();

		 }

		 private void initCommPort() throws Exception{
		 	 	boolean boolPortOK=false;
		 	 	portList = CommPortIdentifier.getPortIdentifiers();
		 	 	while (portList.hasMoreElements()) {
		 	           portId = (CommPortIdentifier) portList.nextElement();
		 	            if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
		 		                if (portId.getName().equalsIgnoreCase(strPortName)) {
		 		                    this.serialPort = (SerialPort)portId.open("SimpleWriteApp", 2000);
		 		                    outputStream = serialPort.getOutputStream();
		 							inputStream=serialPort.getInputStream();

		 		  					serialPort.notifyOnDataAvailable(true);
		 		                    serialPort.setSerialPortParams(9600,
		 		                            SerialPort.DATABITS_8,
		 		                            SerialPort.STOPBITS_1,
		 		                            SerialPort.PARITY_NONE);
		 		                           // System.out.println("Here I come!");
		 		                    boolPortOK=true;
		 							break;
		 						}


		 	 			}
		 		}
		 		if(!boolPortOK) throw new Exception("Port "+strPortName+" does not exist!");

		 	}


	private String readSMSByIndex(int index) throws Exception        {


		final String AT_LIST="AT+CMGR="+index+"\r";
		StringBuffer sb=new StringBuffer();

		sb.append(writeATCmd(AT_LIST));
		return sb.toString();
	}

	private String readSMS() throws Exception{


		final String AT_LIST="AT+CMGR=1\r";
		StringBuffer sb=new StringBuffer();
		sb.append(writeATCmd(AT_LIST));
		return sb.toString();
	}


	private String writeATCmd(String strATCmd) throws Exception{
			outputStream.write(strATCmd.getBytes());
			outputStream.flush();

			byte[] data=new byte[1024];
			int ch=inputStream.read(data);
			String str=new String(data,0,ch);
			//System.out.println("Original message =" + str);
			return str;

	}

	private void writeATCmdSMS(String strATCmd) throws Exception{

				outputStream.write(strATCmd.getBytes());
				outputStream.flush();
				System.out.println("Done");
				byte[] data=new byte[20];
				int ch=inputStream.read(data);
				System.out.println(new String(data,0,ch));



			}

public void deleteSMS(String strATCmd) throws Exception
            {
				outputStream.write(strATCmd.getBytes());
				outputStream.flush();

				byte[] data=new byte[20];
				int ch=inputStream.read(data);
				System.out.println(new String(data,0,ch));
			}


final public void sendSMS(String strPhNo,String strMsg) throws Exception
{


//final String STR_AT_CMGS="AT+CMGS=\""+strPhNo+"\"\r";
///final String STR_CTRL_Z=strMsg+(char)26;
///writeATCmdSMS(STR_AT_CMGS);
///writeATCmdSMS(STR_CTRL_Z);
//Thread.sleep(1500);
					//final String STR_AT_CMGS="AT+CMGS=\""+strPhNo+"\"\r";
					//final String STR_CTRL_Z=strMsg+(char)26+"\r";
					//final char controlZ = 26;
					//writeATCmdSMS(("AT+CMGS=\""+strPhNo+"\"\r"+strMsg+controlZ));
				//	writeATCmdSMS(STR_CTRL_Z);
                      final char controlZ = 26;
			          outputStream.write(("AT+CMGS=\"9942737177\"\rOTP"+controlZ).getBytes());
                     // outputStream.flush();
                    // serialPort.close();
                	  System.out.println("Done");
				      byte[] data=new byte[20];
				      int ch=inputStream.read(data);
			     	  System.out.println(new String(data,0,ch));
}

	private String getPhoneNoFromRsp(String rsp){
			final String OFFSET_PH_NO="READ\",\"";
			final int PH_NO_LNGTH=13;
			int offset=rsp.indexOf(OFFSET_PH_NO)+OFFSET_PH_NO.length();
			int end=rsp.indexOf("\"",offset);
			String result = rsp.substring(offset,end);
			return result;
		}

	private	String getMsgFromRsp(String str){

			int offset1=str.indexOf("/");
			int off1=str.indexOf("\"",offset1)+1;
			int endOffset=str.lastIndexOf("OK");
			String msg=str.substring(off1,endOffset).trim();
			System.out.println("msg = " +msg );
			return msg;
	}

	private int getMsgIndex() throws Exception{
		int intCount=1;
		final String ERROR="ERROR:321";
		while(true){
			try{
				String str=this.readSMSByIndex(intCount);
				if(str.toUpperCase().indexOf(ERROR)!=-1){
					break;
				}else{
					intCount++;
				}
			}catch(Throwable t){
			}

		}

		return intCount;

	}

	private void startReceivingSMS() throws Exception{
			final String ERROR="ERROR";
			while(boolKeepReceiving){
			Thread.sleep(intDelay);
			try{

//						String str=this.readSMSByIndex(cmgr);

					String str=this.readSMS();
     	    	    System.out.println(str);



						if(str.toUpperCase().indexOf(ERROR)!=-1){
							System.out.println("NO MSG");
						}else{


						 if(str.indexOf("REC UNREAD") != -1) {

                         Random generator = new Random();
                         int r = generator.nextInt(999999);
                         String ran12=new Integer(r).toString();
                         String ran="Long Term Password : "+ran12;
						processSMS(str,ran12);


                       // this.sendSMS("+919942737177","hai");

                       // this.sendSMS(s.phoneNo,s.ran);

						final String STR_AT_CMGD="AT+CMGD=1\r";
					//	Thread.sleep(1000);

                         String phoneNo1 = str.substring(str.indexOf("REC UNREAD\",\"")+16, str.indexOf("REC UNREAD\",\"")+26);
                        	//		final String STR_AT_CMGD="AT+CMGD=1\r";
		                this.deleteSMS(STR_AT_CMGD);
                        login("9942737177","flipcartcom");
                        System.out.println("+++++");
                        System.out.println("no and ran"+phoneNo1+" "+ran);
			            sendSMS(phoneNo1,ran);
				        System.out.println("Message has been sent successfully!");
						}



						}
					}catch(Throwable t){

						System.out.println("ERROR RECEIVING MSG");
						t.printStackTrace();

					}



			}


	}



	final public void startReceive(ArrayList alSMSStore,int intDelay) throws Exception{
		this.alSMSStore=alSMSStore;
		this.intDelay=intDelay;
		threadRX=new Thread(this);
		threadRX.start();
	}

	final public void run(){
		try{
			startReceivingSMS();
		}catch(Throwable t){
			t.printStackTrace();
		}
	}



	final public void stopReceivingSMS(){
		this.boolKeepReceiving=false;
	}





	public ArrayList getReceivedMessages(){
			return this.alSMSStore;
	}




    //----------------
     private static void setProxy(String host, int port) {
  URLConnector.setProxy(host, port);
 }

 private static void getSite() {
  URLConnector.connect("http://www.way2sms.com/", false, "GET", null, null);
  responseCode = URLConnector.getResponseCode();
  if(responseCode != HttpURLConnection.HTTP_MOVED_TEMP && responseCode != HttpURLConnection.HTTP_OK)
   exit("getSite failed!");
  else {
   site = URLConnector.getLocation();
   if(site != null)
    site = site.substring(7, site.length() - 1);
  }
  URLConnector.disconnect();
 }

 private static void preHome() {
  URLConnector.connect("http://" + site + "/content/prehome.jsp", false, "GET", null, null);
  responseCode = URLConnector.getResponseCode();
  if(responseCode != HttpURLConnection.HTTP_MOVED_TEMP && responseCode != HttpURLConnection.HTTP_OK)
   exit("preHome failed");
  else
   cookie = URLConnector.getCookie();
  URLConnector.disconnect();
 }

 public static void login(String uid, String pwd)throws Exception {
  getSite();
  preHome();

  String location = null;

  credentials.set("username", uid);
  credentials.append("password", pwd);
  credentials.append("button", "Login");
  userCredentials = credentials.getUserCredentials();

  URLConnector.connect("http://" + site + "/Login1.action", false, "POST", cookie, userCredentials);
  responseCode = URLConnector.getResponseCode();
  if(responseCode != HttpURLConnection.HTTP_MOVED_TEMP && responseCode != HttpURLConnection.HTTP_OK)
   exit("authentication failed!");
  else
   location = URLConnector.getLocation();
  URLConnector.disconnect();

  URLConnector.connect(location, false, "GET", cookie, null);
  responseCode = URLConnector.getResponseCode();
  if(responseCode != HttpURLConnection.HTTP_MOVED_TEMP && responseCode != HttpURLConnection.HTTP_OK)
   exit("redirection failed!");
  URLConnector.disconnect();
 }

 private static void getActionString() {
  URLConnector.connect("http://" + site + "/jsp/InstantSMS.jsp", false, "GET", cookie, null);
  responseCode = URLConnector.getResponseCode();
  if(responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_OK) {
   String str = URLConnector.getResponse();

   String aStr = "name=\"Action\" id=\"Action\"";
   int aStrLen = aStr.length();

   int index = str.indexOf(aStr);
   if(index > 0) {
    str = str.substring(index + aStrLen);
    index = str.indexOf("\"");
    if(index > 0) {
     str = str.substring(index + 1);
     index = str.indexOf("\"");
     if(index > 0)
      actionStr = str.substring(0, index);
    }
   }
  } else
   exit("getActionString failed!");
  URLConnector.disconnect();
 }

/* public static void sendSMS(String receiversMobNo, String msg)throws Exception {
  getActionString();

  credentials.reset();
  credentials.set("HiddenAction", "instantsms");
  credentials.append("catnamedis", "Birthday");
  if(actionStr != null)
   credentials.append("Action", actionStr);
  else
   exit("Action string missing!");
  credentials.append("chkall", "on");
  credentials.append("MobNo", receiversMobNo);
  credentials.append("textArea", msg);

  userCredentials = credentials.getUserCredentials();

  URLConnector.connect("http://" + site + "/quicksms.action", true, "POST", cookie, userCredentials);
    System.out.println("######");
  responseCode = URLConnector.getResponseCode();
  if(responseCode != HttpURLConnection.HTTP_MOVED_TEMP && responseCode != HttpURLConnection.HTTP_OK)
   exit("sendSMS failed!");
  URLConnector.disconnect();
 }

 private static void sendSMS(String[] receiversMobNos, String msg)throws Exception {
 int noOfReceivers = receiversMobNos.length;

 for(int i = 0; i < noOfReceivers; i++)
  sendSMS(receiversMobNos[i], msg);
 }*/

 private static void exit(String errorMsg) {
  System.err.println(errorMsg);
  System.exit(1);
 }

 //--------------------

	public abstract void processSMS(String message,String ran1) throws Exception;



}